grammar Language
  include Expression
  
  rule program
    statement+ {
      def eval(env={})
        elements.inject(env) { |env, el| el.eval(env) }
      end
    }
  end
  
  rule statement
    s:(print / input / sqrt / abs / let) (space / newline) {
      def eval(env={})
        s.eval(env)
      end
    }
  end
  
  rule print
    'PRINT' space s:string {
      def eval
        puts s.eval
        true
      end
    }
  end
  
  rule let
    'LET' space name 
    space ':=' space
    expression {
      def eval(env={})
        env[name.text_value] = expression.eval(env)
        env
      end
    }
  end
  
  rule sqrt
    'SQRT' space expression {
      def eval(env={})
        Math.sqrt(expression.eval)
      end
    }
  end
  
  rule abs
    'ABS' space expression {
      def eval(env={})
        Integer(expression.eval).abs
      end
    }
  end
  
  rule input
    'INPUT' space name {
      def eval(env={})
        # AKK: actually read input
        env[name.text_value] = 'GET OFF MY LAWN'
        env
      end
    }
  end
  
  rule name
    [a-z] [a-zA-Z1-9]*
  end
  
  rule string
    '"' body:text '"' {
      def eval
        body.text_value
      end
    }
  end
  
  rule text
    [a-zA-Z\s]+
  end
  
  rule newline
    [\n\r]+
  end
  
end
